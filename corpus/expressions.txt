=====================================
Subscript expressions
=====================================

a[1]
b[2, 3]
c[4, 5,]

---

(module
  (subscript (identifier) (integer))
  (subscript (identifier) (integer) (integer))
  (subscript (identifier) (integer) (integer)))


=====================================
Subscript slice expressions
=====================================

a[:]
b[5:]
b[5:6, ...]
c[::]

---

(module
  (subscript
    (identifier)
    (slice))
  (subscript
    (identifier)
    (slice (integer)))
  (subscript
    (identifier)
    (slice (integer) (integer))
    (ellipsis))
  (subscript
    (identifier)
    (slice)))

=====================================
Attribute references
=====================================

a.b.c

---

(module
  (attribute
    (attribute (identifier) (identifier))
    (identifier)))

=====================================
Await expressions
=====================================

await i(j, 5)
return await i(j, 5)

---

(module
  (await (call
    (identifier)
    (argument_list (identifier) (integer))))
  (return_statement
    (expression_list
      (await (call
        (identifier)
        (argument_list (identifier) (integer)))))))

=====================================
Call expressions
=====================================

__a__()
b(1)
c(e, f=g)
i(j, 5,)

---

(module
  (call
    (identifier)
    (argument_list))
  (call
    (identifier)
    (argument_list (integer)))
  (call
    (identifier)
    (argument_list
      (identifier)
      (keyword_argument (identifier) (identifier))))
  (call
    (identifier)
    (argument_list (identifier) (integer))))

=====================================
Print used as an identifier
=====================================

print(a, b=c)
print(d, *e)
print(*f, **g,)
a(print)
def a(print):
  b
def a(printer=print):
  c
def a(*print):
  b
def a(**print):
  b
def print():
  a

---

(module
  (call
    (identifier)
    (argument_list (identifier) (keyword_argument (identifier) (identifier))))
  (call
    (identifier)
    (argument_list (identifier) (list_splat_argument (identifier))))
  (call
    (identifier)
    (argument_list (list_splat_argument (identifier)) (dictionary_splat_argument (identifier))))
  (call
    (identifier)
    (argument_list (identifier)))
  (function_definition
    (identifier)
    (parameters (identifier))
    (identifier))
  (function_definition
    (identifier)
    (parameters (default_parameter (identifier) (identifier)))
    (identifier))
  (function_definition
    (identifier)
    (parameters (list_splat_parameter (identifier)))
    (identifier))
  (function_definition
    (identifier)
    (parameters (dictionary_splat_parameter (identifier)))
    (identifier))
  (function_definition
    (identifier)
    (parameters)
    (identifier)))


=====================================
Exec used as an identifier
=====================================

exec("print \"'%s' has %i characters\" % (public_function(), len(public_function()))", {"__builtins__" : None}, safe_dict)
exec("""exec _code_ in _globs_, _locs_""")

---

(module
  (call
    (identifier)
    (argument_list
      (string)
      (dictionary (pair (string) (none)))
      (identifier)))
  (call (identifier) (argument_list (string))))

=====================================
Calls with splats
=====================================

a(*())
a(**{})
a(*b)
c(d, *e, **g)

---

(module
  (call
    (identifier)
    (argument_list (list_splat_argument)))
  (call
    (identifier)
    (argument_list (dictionary_splat_argument)))
  (call
    (identifier)
    (argument_list
      (list_splat_argument (identifier))))
  (call
    (identifier)
    (argument_list
      (identifier)
      (list_splat_argument (identifier))
      (dictionary_splat_argument (identifier)))))

=====================================
Math operators
=====================================

a + b * c ** d - e / 5
-5
+x
~x

---

(module
  (binary_operator
    (binary_operator
      (identifier)
      (binary_operator
        (identifier)
        (binary_operator
          (identifier)
          (identifier))))
    (binary_operator
      (identifier)
      (integer)))
  (unary_operator (integer))
  (unary_operator (identifier))
  (unary_operator (identifier)))

=====================================
Bitwise operators
=====================================

a << b | c >> d & e

---

(module
  (binary_operator
    (binary_operator
      (identifier)
      (identifier))
    (binary_operator
      (binary_operator
        (identifier)
        (identifier))
      (identifier))))

=====================================
Boolean operators
=====================================

a or b and c
not d

---

(module
  (boolean_operator
    (identifier)
    (boolean_operator
      (identifier)
      (identifier)))
  (not_operator (identifier)))

=====================================
Comparison operators
=====================================

a < b <= c == d >= e > f
not a == b or c == d

---

(module
  (comparison_operator
    (identifier)
    (identifier)
    (identifier)
    (identifier)
    (identifier)
    (identifier))
  (not_operator (boolean_operator
    (comparison_operator (identifier) (identifier))
    (comparison_operator (identifier) (identifier)))))

====================================================
Assignments
====================================================

a = 1
a, b = 1, 2
a, = 1, 2
a[b] = c = d

---

(module
  (assignment
    (expression_list
      (identifier))
    (expression_list
      (integer)))
  (assignment
    (expression_list
      (identifier)
      (identifier))
    (expression_list
      (integer)
      (integer)))
  (assignment
    (expression_list
      (identifier))
    (expression_list
      (integer)
      (integer)))
  (assignment
    (expression_list
      (subscript (identifier) (identifier)))
    (assignment
      (expression_list (identifier))
      (expression_list (identifier)))))

====================================================
Augmented assignments
====================================================

a += 1
b >>= 2
c //= 1

---

(module
  (augmented_assignment
    (expression_list (identifier))
    (expression_list (integer)))
  (augmented_assignment
    (expression_list (identifier))
    (expression_list (integer)))
  (augmented_assignment
    (expression_list (identifier))
    (expression_list (integer))))

====================================================
Yield expressions
====================================================

def example():
  yield
  yield 1
  x = yield 2
  yield from a

---

(module
  (function_definition (identifier) (parameters)
    (yield)
    (yield (integer))
    (assignment
      (expression_list (identifier))
      (yield (integer)))
    (yield (identifier))))

====================================================
lambdas
====================================================

lambda b, c: d("e" % f)
lambda: True
lambda a, b = c, *d, **e: a
lambda (a,b): (a, b)
lambda ((a,b)): (a, b)
lambda (): True

---

(module
  (lambda
    (lambda_parameters
      (identifier)
      (identifier))
    (call
      (identifier)
      (argument_list
        (binary_operator (string) (identifier)))))
  (lambda (true))
  (lambda
    (lambda_parameters
      (identifier)
      (default_parameter (identifier) (identifier))
      (list_splat_parameter (identifier))
      (dictionary_splat_parameter (identifier)))
    (identifier))
  (lambda
    (lambda_parameters (identifier) (identifier))
    (tuple (identifier) (identifier)))
  (lambda
    (lambda_parameters (tuple (identifier) (identifier)))
    (tuple (identifier) (identifier)))
  (lambda
    (lambda_parameters)
    (true)))

=====================================
Conditional if expressions
=====================================

a = b if c else d
something() if a else d
slice(1,1,1) if a else d

---

(module
  (assignment
    (expression_list (identifier))
    (expression_list
      (conditional_expression (identifier) (identifier) (identifier))))
  (conditional_expression (call (identifier) (argument_list)) (identifier) (identifier))
  (conditional_expression
    (call (identifier) (argument_list (integer) (integer) (integer)))
		(identifier) (identifier)))
